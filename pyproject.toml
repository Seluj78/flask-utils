[project]
name = "Flask-Utils"
authors = [
    {name = "Jules Lasne", email = "jules.lasne@gmail.com"},
]
readme = "README.md"
dynamic = ["version"]
requires-python = ">=3.8"
classifiers=[
    "Development Status :: 5 - Production/Stable",
    "Framework :: Flask",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
    "Topic :: Utilities",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.8",
]
dependencies = [
    "flask>=2.2.0",
]

[tool.setuptools]
packages = ["flask_utils"]

[tool.setuptools.dynamic]
version = {attr = "flask_utils.__version__"}

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "tox>=4.20.0",
    "setuptools>=75.1.0",
    "wheel>=0.44.0",
    "build>=1.2.2",
    "ruff>=0.6.5",
    "pre-commit>=3.5.0",
    "mypy>=1.11.2",
    "twine>=5.1.1",
]


[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | \venv
  | _build
  | buck-out
  | build
  | dist
  | frontend
  | www
  | venv
)/
'''

[tool.mypy]
python_version = "3.8"
warn_unused_configs = true
ignore_missing_imports = false
disallow_untyped_defs = true
show_column_numbers = true
warn_unused_ignores = true
show_error_codes = true
warn_redundant_casts = true
local_partial_types = true
#plugins = ""
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | \venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".venv"
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E", "F", "I", "W", "B", "Q"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = ["E702"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.isort]
combine-as-imports = false
force-single-line = true
split-on-trailing-comma = false
from-first = false
length-sort = true

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
